Exercídio 01

alert('Boas vindas ao nosso site!');
let nome = 'Lua';
let idade = 25;
let numeroDeVendas = 50;
let saldoDisponivel = 1000;

alert('Erro! Preencha todos os campos!');
let mensagemDeErro = 'Erro! Preencha todos os campos';

alert(mensagemDeErro);

let nome = prompt('Digite o seu nome');

let idade = prompt('Digite a sua idade');
if (idade>= 18) {
    alert('Pode tirar a habilitação!')
}

////////Aula 01.2

Nesta aula, aprendemos sobre condicionais e concatenação, especificamente sobre o comando else e como usar comentários no código.

O else é usado para criar um "contraponto" ao if, ou seja, ele define o que acontece quando a condição do if não é satisfeita.

Também aprendemos sobre a importância de usar comentários no código para explicar o que cada parte do código faz, tornando-o mais fácil de entender e de manter.

Para escrever um comentário em JavaScript, usamos o sinal de barra dupla //. Tudo que estiver depois do // será ignorado pelo interpretador JavaScript.

////////Aula 02.2

(string = texto)

Nessa aula, aprendemos sobre a importância de usar Template Strings para concatenar textos com variáveis e números em JavaScript.

Vimos que, ao usar aspas simples, o JavaScript interpreta o código como um texto, e não como uma variável. Para resolver isso, usamos as crases (`) e o sinal de cifrão ($) seguido da variável entre chaves {}.

Com isso, conseguimos criar mensagens mais dinâmicas, onde o valor da variável é inserido automaticamente na mensagem, sem precisarmos alterá-la manualmente.

Essa técnica é muito útil para evitar acoplamento no código, ou seja, a dependência de uma parte do código em outra.

Lembre-se: usar Template Strings torna o código mais flexível e fácil de manter!


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////Aula 03.2
Nessa aula, aprendemos a dar dicas para o jogador do nosso jogo de adivinhar o número secreto.

Primeiro, criamos uma condição para verificar se o chute do jogador é maior ou menor que o número secreto.

Depois, usamos o alert() para mostrar uma mensagem informando se o número secreto é maior ou menor que o chute.

Por fim, vimos que o código está funcionando como esperado, mas ainda precisamos fazer algumas modificações para que o jogo continue até que o jogador acerte o número secreto.


////////Aula 03.3
Nessa aula, aprendemos sobre o loop while em JavaScript, que permite executar um bloco de código repetidamente enquanto uma determinada condição for verdadeira.

Vimos como usar o while para criar um jogo de adivinhação, onde o jogador precisa adivinhar um número secreto. O loop continua pedindo ao jogador para digitar um número até que ele adivinhe o número secreto.

Também aprendemos sobre a importância da indentação do código para melhorar a legibilidade e organização do código.

E por fim, vimos como usar operadores de comparação, como !=, == e >, para comparar variáveis e números dentro do código.


////////Aula 03.4
Primeiro, criamos uma variável chamada tentativas e a inicializamos com o valor 1, pois a primeira tentativa já é realizada ao iniciar o jogo.

Depois, dentro do bloco else, onde o jogador erra o chute, incrementamos a variável tentativas em 1, utilizando a notação tentativas++, que é uma forma mais concisa de escrever tentativas = tentativas + 1.

Por fim, ao acertar o número secreto, exibimos uma mensagem informando o número secreto e quantas tentativas foram necessárias para descobri-lo, utilizando a variável tentativas dentro de um template string.




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




////////Aula 04.2
Nessa aula, aprendemos sobre o break, uma ferramenta poderosa para controlar loops. Ele nos permite interromper o loop quando uma condição específica é satisfeita.

Imagine o break como um botão "pausar" para o loop. Quando o break é executado, o loop para de executar e o código continua a partir do ponto seguinte ao loop.

Também aprendemos a usar o break para criar uma condição especial dentro de um loop. No nosso jogo, usamos o break para parar o loop quando o jogador adivinha o número secreto.

Por fim, vimos como usar if e else para personalizar mensagens com base em diferentes condições. No nosso jogo, usamos if e else para exibir mensagens diferentes dependendo do número de tentativas do jogador.

////////Aula 04.3
Nessa aula, aprendemos uma maneira de simplificar o código usando o operador ternário. Ele é como um atalho para escrever um bloco if...else de forma mais compacta e elegante.

Imagine que você precisa decidir se uma palavra deve ser usada no singular ou no plural, dependendo de uma condição. O operador ternário te permite fazer isso em uma única linha!

Por exemplo, se você tem uma variável tentativas e quer escrever "tentativa" ou "tentativas" dependendo do valor dela, você pode usar:

let palavraTentativa = tentativas > 1 ? 'tentativas' : 'tentativa';
Essa linha de código é equivalente a um bloco if...else completo, mas muito mais concisa!

O operador ternário é uma ferramenta poderosa que você encontrará em muitos códigos JavaScript. Ele torna o código mais legível e eficiente, além de ser uma ótima maneira de evitar repetições.

Lembre-se: o importante é que o código seja claro e fácil de entender.


////////Aula 04.4
Nessa aula, aprendemos como gerar números aleatórios em JavaScript usando a função Math.random().

Vimos que a função Math.random() retorna um número pseudo aleatório entre 0 (inclusive) e 1 (exclusivo). Para gerar um número aleatório entre 0 e 9, multiplicamos o resultado de Math.random() por 10 e usamos a função parseInt() para obter apenas a parte inteira do número.

Para gerar um número aleatório entre 1 e 10, somamos 1 ao resultado da multiplicação.

////////Aula 04.5
Nessa aula, aprendemos a usar o gerador de números aleatórios em JavaScript para criar um jogo de adivinhação.

Primeiro, revisamos como a função Math.random() funciona e como podemos usá-la para gerar números aleatórios entre 0 e 1.

Depois, aprendemos a multiplicar esse número por 10 e usar a função parseInt() para obter um número inteiro entre 0 e 9.

Para gerar um número entre 1 e 10, somamos 1 ao resultado da multiplicação.

Em seguida, ampliamos o jogo para gerar números entre 1 e 100, ajustando a multiplicação para 100 e alterando o prompt para informar o novo intervalo.
